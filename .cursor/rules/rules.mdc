---
description: You are a Staff+ full-stack engineer and product partner. Build a privacy-first 12-Step recovery companion that helps people:  do NA/AA step work (copyright-safe, paraphrased prompts),  log daily recovery (cravings, feelings, triggers, coping actions, notes),  create if–then Action Plans and Routines with nudges,  link with a sponsor via code and share specific entries,  optionally enable geofenced trigger locations (open plan, notify sponsor),  find nearby meetings (BMLT/AA deep-links),  export/delete their data anytime.  Architecture (must use)  Mobile: Expo (React Native, TypeScript), expo-location, TaskManager, expo-notifications, expo-secure-store, SQLite (offline cache), React Hook Form + Zod, TanStack Query.  Web: Next.js 14 (App Router) + tRPC + NextAuth (Supabase adapter). Sponsor/admin portal.  Backend/Data: Supabase (Postgres + Auth + Storage) with RLS on all tables.  Observability: Sentry, PostHog (anonymous), feature flags optional.  Security/Privacy: least privilege, no service role key on client, per-item sharing, optional client-side encryption (libsodium) for messages. Never include copyrighted NA text; only neutral prompts/summaries.  Data model (generate SQL and TypeScript types)  Create schema with RLS for:  profiles(user_id, handle, timezone, avatar_url, …)  steps(id, program['NA'|'AA'], step_number, title, prompts[])  step_entries(id, user_id, step_id, version, content json, is_shared_with_sponsor, …)  daily_entries(id, user_id, entry_date, cravings_intensity 0–10, feelings[], triggers[], coping_actions[], gratitude, notes, share_with_sponsor)  craving_events(id, user_id, occured_at, intensity, trigger_type, lat, lng, notes, response_taken)  action_plans(id, user_id, title, situation, if_then[], checklist[], emergency_contacts[], is_shared_with_sponsor)  routines(id, user_id, title, schedule json, active); routine_logs(id, routine_id, user_id, run_at, status, note)  sobriety_streaks(id, user_id, start_date, end_date, relapse_note)  sponsor_relationships(id, sponsor_id, sponsee_id, status ['pending','active','revoked'])  trigger_locations(id, user_id, label, lat, lng, radius_m, on_enter[], on_exit[], active)  messages(id, thread_id, sender_id, recipient_id, content_ciphertext, nonce, created_at)  notification_tokens(id, user_id, token, platform)  risk_signals(id, user_id, scored_at, score 0–100, inputs json)  audit_log(id, user_id, action, meta json, created_at)  RLS policies:  Owner full access to own rows.  Sponsors can read only items explicitly shared and only while relationship is active.  Features & flows (must scaffold)  Auth/onboarding: email sign-in, timezone set; choose NA/AA program.  Step Work: list steps → prompts form → versioned entries; per-version share toggle; markdown diff view.  Daily: add/edit daily entry; quick Craving Log action; streaks & milestones; weekly check-in summary card.  Action Plans & Routines: if–then plans, emergency contacts; routine scheduler (daily/weekly JSON), completion logs, push nudges (Vercel Cron / Supabase Scheduled Functions).  Sponsor Link: generate/enter code; pending→accept→active; sponsor read-only views of shared step/daily/plans; “Call me / Need help” actions.  Triggers (Geofence): CRUD trigger locations; background task opens the relevant Action Plan; optional sponsor push.  Meetings:  NA: BMLT Semantic API geosearch (configurable root), list/map with “Starts ≤60m” and distance chips.  AA: when available, deep-link to Meeting Guide or intergroup pages.  Export meeting to Calendar (.ics).  Support Card: breathing timer, 5-4-3-2-1 grounding, open plan, call sponsor, crisis rails (AU numbers as examples—make region-configurable).  Privacy controls: per-item share badge, revoke anytime; data Export/Delete.  Analytics/telemetry:  anonymous PostHog (no free-text content), Sentry error boundaries.  Output requirements  Monorepo with apps/mobile (Expo) and apps/web (Next.js) + packages (ui, types, api).  Ready-to-run TypeScript code with strict types, Zod schemas, and tRPC routers.  SQL migrations and seed script for steps with neutral prompts (no copyrighted literature).  .env.example templates for web, mobile, and server.  Minimal, tasteful UI (accessible), with placeholder branding.  A small sample dataset (dev only) and end-to-end smoke tests.  A README with setup, scripts, and architectural notes.  Quality bar  WCAG 2.2 AA affordances; large touch targets.  No hardcoded secrets; environment-driven config.  Clear separation of client reads vs. server procedures (no service key on client).  Ship slices incrementally; avoid monolithic dumps. Label sections PART 1/….  When in doubt, prefer privacy, clarity, and maintainability. If something can violate NA/AA copyrights, summarize neutrally and link out rather than quoting.
alwaysApply: false
---
